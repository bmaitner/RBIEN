
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rangeModelMetadata"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('rangeModelMetadata')
Type, vignette("rmm_directory") for an overview of functions

  vignette("rmm_vignette") for using the functions 

  vignette("rmm_workflow") for incorporating rmm in a range modeling workflow, or

  vignette("rmm_Multispecies") for including multiple species in a single rmm object
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("csvToRMM")
> ### * csvToRMM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: csvToRMM
> ### Title: Create rangeModelMetaData ('rmm') object from a .csv File
> ### Aliases: csvToRMM
> 
> ### ** Examples
> 
> csv <- "somePathOnYourMachine/rmm_example.csv";
> ## Not run: temp <- csvToRMM(csv);
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmAutofillBIEN")
> ### * rmmAutofillBIEN
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmAutofillBIEN
> ### Title: Add occurrence metadata from a BIEN query to an rmm object
> ### Aliases: rmmAutofillBIEN
> 
> ### ** Examples
> 
> ## Not run: 
> ##D rmm <- rmmTemplate()
> ##D xs <- BIEN::BIEN_occurrence_species(species="Xanthium strumarium")
> ##D rmmAutofillBIEN(rmm = rmm, occurrences = xs)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rmmAutofillEnvironment")
> ### * rmmAutofillEnvironment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmAutofillEnvironment
> ### Title: Add relevant environmental data information to an rmm object
> ### Aliases: rmmAutofillEnvironment
> 
> ### ** Examples
> 
> ## Not run: 
> ##D rmm=rmmTemplate()
> ##D rasterFiles=list.files(path=paste(system.file(package='dismo'), '/ex', sep=''),
> ##D                        pattern='grd', full.names=TRUE)
> ##D #make a stack of the rasters
> ##D env=raster::stack(rasterFiles)
> ##D # for fitting environment
> ##D rmm=rmmAutofillEnvironment(rmm,env,transfer=0)
> ##D # for the first environment that you're transfering to
> ##D rmm=rmmAutofillEnvironment(rmm,env,transfer=1)
> ##D # for the second environment that you're transfering to, etc.
> ##D rmm=rmmAutofillEnvironment(rmm,env,transfer=2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rmmAutofillPackageCitation")
> ### * rmmAutofillPackageCitation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmAutofillPackageCitation
> ### Title: Add all package citations to an rmm object
> ### Aliases: rmmAutofillPackageCitation
> 
> ### ** Examples
> 
> rmm=rmmTemplate()
> rmm=rmmAutofillPackageCitation(rmm,c('raster','sp'))
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmAutofillspocc")
> ### * rmmAutofillspocc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmAutofillspocc
> ### Title: Add occurrence metadata from a spocc query to an rmm object
> ### Aliases: rmmAutofillspocc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D rmm=rmmTemplate()
> ##D xs <- spocc::occ("Xanthium strumarium")
> ##D rmmAutofillspocc(rmm = rmm, occ = xs)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rmmCheckEmpty")
> ### * rmmCheckEmpty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmCheckEmpty
> ### Title: Check an rmm object for empty fields
> ### Aliases: rmmCheckEmpty
> 
> ### ** Examples
> 
> #First, make an empty rmm object:
> rmm<-rmmTemplate()
> #Next, we check for emtpy fields:
> empties1<-rmmCheckEmpty(rmm = rmm)
===================================

There are  62 empty obligate fields:

$authorship$rmmName
$authorship$names
$authorship$license
$authorship$contact
$authorship$relatedReferences
$authorship$authorNotes
$authorship$miscNotes
$authorship$doi
$studyObjective$purpose
$studyObjective$rangeType
$studyObjective$invasion
$studyObjective$transfer
$data$occurrence$taxon
$data$occurrence$dataType
$data$occurrence$yearMin
$data$occurrence$yearMax
$data$occurrence$sources
$data$occurrence$spatialAccuracy
$data$environment$variableNames
$data$environment$yearMin
$data$environment$yearMax
$data$environment$extentSet
$data$environment$extentRule
$data$environment$resolution
$data$environment$projection
$data$environment$sources
$data$environment$notes
$data$observation$variableNames
$data$observation$minVal
$data$observation$maxVal
$data$dataNotes
$dataPrep$dataPrepNotes
$model$algorithms
$model$algorithmCitation
$model$speciesCount
$model$selectionRules
$model$finalModelSettings
$model$notes
$model$partition$partitionSet
$model$partition$partitionRule
$model$partition$notes
$model$references
$prediction$binary$thresholdSet
$prediction$binary$thresholdRule
$prediction$extrapolation
$prediction$transfer$environment1$extrapolation
$prediction$transfer$notes
$prediction$uncertainty$units
$prediction$uncertainty$minVal
$prediction$uncertainty$maxVal
$prediction$uncertainty$notes
$assessment$references
$assessment$notes
$code$software$platform
$code$software$packages
$code$demoCodeLink
$code$vignetteCodeLink
$code$fullCodeLink
$code$demoDataLink
$code$vignetteDataLink
$code$fullDataLink
$code$codeNotes


===================================

===================================

> #If looks like there are quite a few empty obligate fields.  Let's populate a few:
> rmm$data$occurrence$taxon<-"Acer rubrum"
> rmm$data$environment$variableNames<-"Bio1"
> #Now, if we run rmmCheckEmpty again, we see there are 2 fewer empty, obligate fields
> empties2<-rmmCheckEmpty(rmm = rmm)
===================================

There are  60 empty obligate fields:

$authorship$rmmName
$authorship$names
$authorship$license
$authorship$contact
$authorship$relatedReferences
$authorship$authorNotes
$authorship$miscNotes
$authorship$doi
$studyObjective$purpose
$studyObjective$rangeType
$studyObjective$invasion
$studyObjective$transfer
$data$occurrence$dataType
$data$occurrence$yearMin
$data$occurrence$yearMax
$data$occurrence$sources
$data$occurrence$spatialAccuracy
$data$environment$yearMin
$data$environment$yearMax
$data$environment$extentSet
$data$environment$extentRule
$data$environment$resolution
$data$environment$projection
$data$environment$sources
$data$environment$notes
$data$observation$variableNames
$data$observation$minVal
$data$observation$maxVal
$data$dataNotes
$dataPrep$dataPrepNotes
$model$algorithms
$model$algorithmCitation
$model$speciesCount
$model$selectionRules
$model$finalModelSettings
$model$notes
$model$partition$partitionSet
$model$partition$partitionRule
$model$partition$notes
$model$references
$prediction$binary$thresholdSet
$prediction$binary$thresholdRule
$prediction$extrapolation
$prediction$transfer$environment1$extrapolation
$prediction$transfer$notes
$prediction$uncertainty$units
$prediction$uncertainty$minVal
$prediction$uncertainty$maxVal
$prediction$uncertainty$notes
$assessment$references
$assessment$notes
$code$software$platform
$code$software$packages
$code$demoCodeLink
$code$vignetteCodeLink
$code$fullCodeLink
$code$demoDataLink
$code$vignetteDataLink
$code$fullDataLink
$code$codeNotes


===================================

===================================

> 
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmCheckFinalize")
> ### * rmmCheckFinalize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmCheckFinalize
> ### Title: Run a final check of an rmm object
> ### Aliases: rmmCheckFinalize
> 
> ### ** Examples
> 
> rmm<-rmmTemplate() # Make an empty template
> rmmCheckFinalize(rmm)
There are no suggested fields to verify in this rmm object.

 
All obligate field names are present.
===================================

There are  62 empty obligate fields:

$authorship$rmmName
$authorship$names
$authorship$license
$authorship$contact
$authorship$relatedReferences
$authorship$authorNotes
$authorship$miscNotes
$authorship$doi
$studyObjective$purpose
$studyObjective$rangeType
$studyObjective$invasion
$studyObjective$transfer
$data$occurrence$taxon
$data$occurrence$dataType
$data$occurrence$yearMin
$data$occurrence$yearMax
$data$occurrence$sources
$data$occurrence$spatialAccuracy
$data$environment$variableNames
$data$environment$yearMin
$data$environment$yearMax
$data$environment$extentSet
$data$environment$extentRule
$data$environment$resolution
$data$environment$projection
$data$environment$sources
$data$environment$notes
$data$observation$variableNames
$data$observation$minVal
$data$observation$maxVal
$data$dataNotes
$dataPrep$dataPrepNotes
$model$algorithms
$model$algorithmCitation
$model$speciesCount
$model$selectionRules
$model$finalModelSettings
$model$notes
$model$partition$partitionSet
$model$partition$partitionRule
$model$partition$notes
$model$references
$prediction$binary$thresholdSet
$prediction$binary$thresholdRule
$prediction$extrapolation
$prediction$transfer$environment1$extrapolation
$prediction$transfer$notes
$prediction$uncertainty$units
$prediction$uncertainty$minVal
$prediction$uncertainty$maxVal
$prediction$uncertainty$notes
$assessment$references
$assessment$notes
$code$software$platform
$code$software$packages
$code$demoCodeLink
$code$vignetteCodeLink
$code$fullCodeLink
$code$demoDataLink
$code$vignetteDataLink
$code$fullDataLink
$code$codeNotes


===================================

===================================

> 
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmCheckMissingNames")
> ### * rmmCheckMissingNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmCheckMissingNames
> ### Title: Check for missing fields
> ### Aliases: rmmCheckMissingNames
> 
> ### ** Examples
> 
> rmm<-rmmTemplate() # Make an empty template
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmCheckName")
> ### * rmmCheckName
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmCheckName
> ### Title: Check field names of a range model metadata list against
> ###   conventions
> ### Aliases: rmmCheckName
> 
> ### ** Examples
> 
> rmm<-rmmTemplate() # Make an empty template
> rmm$dataPrep$biological$taxonomicHarmonization$taxonomy_source<-"The Plant List"
> # Add a new, non-standard field
> rmm.1=rmmCheckName(rmm)
The following names are not similar to any suggested names, please verify that these are accurate:

$dataPrep$biological$taxonomicHarmonization$taxonomy_source

 
> # Checking the names should identify the new, non-standard field we've added ("taxonomy_source")
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmCheckShiny")
> ### * rmmCheckShiny
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmCheckShiny
> ### Title: RangeModelMetadata Check in Shiny
> ### Aliases: rmmCheckShiny
> 
> ### ** Examples
> 
> ## Not run: 
> ##D rmm1=rmmTemplate()
> ##D rmm1=rmmAutofillPackageCitation(rmm1,c('raster','sp'))
> ##D rasterFiles=list.files(path=paste(system.file(package='dismo'), '/ex', sep=''),
> ##D                        pattern='grd', full.names=TRUE)
> ##D make a stack of the rasters
> ##D env=raster::stack(rasterFiles)
> ##D # for fitting environment
> ##D rmm1=rmmAutofillEnvironment(rmm1,env,transfer=0)
> ##D # for transfer environment 1 (assuming different than for fitting)
> ##D rmm1=rmmAutofillEnvironment(rmm1,env,transfer=1)
> ##D # for transfer environment 2 (assuming different than 1)
> ##D rmm1=rmmAutofillEnvironment(rmm1,env,transfer=2)
> ## End(Not run)
> ## Not run:  rmmCheckShiny(rmm1) 
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmCheckValue")
> ### * rmmCheckValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmCheckValue
> ### Title: Check values of a range model metadata list against commonly
> ###   used values
> ### Aliases: rmmCheckValue
> 
> ### ** Examples
> 
> rmm<-rmmTemplate() #First, we create an empty rmm template
> rmm$data$environment$variableNames<- c("bio1", "bio 2", "bio3", "cromulent")
> #We add 3 of the bioclim layers, including a spelling error (an extra space) in bio2,
> # and a word that is clearly not a climate layer, 'cromulent'.
> rmmCheckValue(rmm = rmm)

==========================================

For the field rmm$data$environment$variableNames

 
The following entries appear accurate:


 bio1; bio3

 
The following entries are similar to suggested values, please verify:

bio 2


Suggested alternatives include: 
bio2

 
The following entries are not similar to any suggested values, please verify that these are accurate:

cromulent

 
> #Now, when we check the values, we see that bio1 and bio2 are reported as exact matches,
> #while 'bio 2' is flagged as a partial match with a suggested value of 'bio2',
> # and cromulent is flagged as not matched at all.
> #If we'd like to return a dataframe containing this information in a perhaps more useful format:
> rmmCheckValue_output<-rmmCheckValue(rmm = rmm,returnData = TRUE)

==========================================

For the field rmm$data$environment$variableNames

 
The following entries appear accurate:


 bio1; bio3

 
The following entries are similar to suggested values, please verify:

bio 2


Suggested alternatives include: 
bio2

 
The following entries are not similar to any suggested values, please verify that these are accurate:

cromulent

 
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmCleanNULLs")
> ### * rmmCleanNULLs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmCleanNULLs
> ### Title: Remove NULL entries range model metadata list
> ### Aliases: rmmCleanNULLs
> 
> ### ** Examples
> 
> # see vignette('rmm_vignette')
> 
> 
> 
> cleanEx()
> nameEx("rmmDataDictionary")
> ### * rmmDataDictionary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmDataDictionary
> ### Title: Open range model metadata dictionary.
> ### Aliases: rmmDataDictionary
> 
> ### ** Examples
> 
> dd=rmmDataDictionary()
> 
> 
> 
> cleanEx()
> nameEx("rmmFamilies")
> ### * rmmFamilies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmFamilies
> ### Title: Print supported family names for rmm objects
> ### Aliases: rmmFamilies
> 
> ### ** Examples
> 
> rmmFamilies()
 [1] "base"                 "ODMAP"                "NULL"                
 [4] "occurrence"           "po"                   "pa"                  
 [7] "transferEnv2"         "transferEnv1"         "dataPrep"            
[10] "maxent"               "maxentExpertMap"      "ppm"                 
[13] "ensemble"             "glm"                  "mars"                
[16] "brt"                  "bioclim"              "ann"                 
[19] "gam"                  "fda"                  "randomForest"        
[22] "rangeBagging"         "occupancy"            "prediction"          
[25] "binaryClassification" "wallace"             
> 
> 
> 
> cleanEx()
> nameEx("rmmTemplate")
> ### * rmmTemplate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmTemplate
> ### Title: Range modeling metadata
> ### Aliases: rmmTemplate
> 
> ### ** Examples
> 
> rmm1=rmmTemplate()
> rmm2=rmmTemplate(family=c('base'))
> str(rmm2)
List of 8
 $ authorship    :List of 8
  ..$ rmmName          : NULL
  ..$ names            : NULL
  ..$ license          : NULL
  ..$ contact          : NULL
  ..$ relatedReferences: NULL
  ..$ authorNotes      : NULL
  ..$ miscNotes        : NULL
  ..$ doi              : NULL
 $ studyObjective:List of 4
  ..$ purpose  : NULL
  ..$ rangeType: NULL
  ..$ invasion : NULL
  ..$ transfer : NULL
 $ data          :List of 4
  ..$ occurrence :List of 6
  .. ..$ taxon          : NULL
  .. ..$ dataType       : NULL
  .. ..$ yearMin        : NULL
  .. ..$ yearMax        : NULL
  .. ..$ sources        : NULL
  .. ..$ spatialAccuracy: NULL
  ..$ environment:List of 9
  .. ..$ variableNames: NULL
  .. ..$ yearMin      : NULL
  .. ..$ yearMax      : NULL
  .. ..$ extentSet    : NULL
  .. ..$ extentRule   : NULL
  .. ..$ resolution   : NULL
  .. ..$ projection   : NULL
  .. ..$ sources      : NULL
  .. ..$ notes        : NULL
  ..$ observation:List of 3
  .. ..$ variableNames: NULL
  .. ..$ minVal       : NULL
  .. ..$ maxVal       : NULL
  ..$ dataNotes  : NULL
 $ dataPrep      :List of 1
  ..$ dataPrepNotes: NULL
 $ model         :List of 8
  ..$ algorithms        : NULL
  ..$ algorithmCitation : NULL
  ..$ speciesCount      : NULL
  ..$ selectionRules    : NULL
  ..$ finalModelSettings: NULL
  ..$ notes             : NULL
  ..$ partition         :List of 3
  .. ..$ partitionSet : NULL
  .. ..$ partitionRule: NULL
  .. ..$ notes        : NULL
  ..$ references        : NULL
 $ prediction    :List of 4
  ..$ binary       :List of 2
  .. ..$ thresholdSet : NULL
  .. ..$ thresholdRule: NULL
  ..$ extrapolation: NULL
  ..$ transfer     :List of 2
  .. ..$ environment1:List of 1
  .. .. ..$ extrapolation: NULL
  .. ..$ notes       : NULL
  ..$ uncertainty  :List of 4
  .. ..$ units : NULL
  .. ..$ minVal: NULL
  .. ..$ maxVal: NULL
  .. ..$ notes : NULL
 $ assessment    :List of 2
  ..$ references: NULL
  ..$ notes     : NULL
 $ code          :List of 8
  ..$ software        :List of 2
  .. ..$ platform: NULL
  .. ..$ packages: NULL
  ..$ demoCodeLink    : NULL
  ..$ vignetteCodeLink: NULL
  ..$ fullCodeLink    : NULL
  ..$ demoDataLink    : NULL
  ..$ vignetteDataLink: NULL
  ..$ fullDataLink    : NULL
  ..$ codeNotes       : NULL
 - attr(*, "class")= chr [1:2] "list" "RMM"
> 
> 
> 
> 
> cleanEx()
> nameEx("rmmToCSV")
> ### * rmmToCSV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rmmToCSV
> ### Title: Create .csv File From rangeModelMetaData Object
> ### Aliases: rmmToCSV
> 
> ### ** Examples
> 
> rmm=rmmTemplate()
> rasterFiles=list.files(path=paste(system.file(package='dismo'), '/ex', sep=''),
+                        pattern='grd', full.names=TRUE)
> #make a stack of the rasters
> env=raster::stack(rasterFiles)
> # for fitting environment
> rmm=rmmAutofillEnvironment(rmm,env,transfer=0)
> # for the first environment that you're transfering to
> rmm=rmmAutofillEnvironment(rmm,env,transfer=1)
> # for the second environment that you're transfering to, etc.
> rmm=rmmAutofillEnvironment(rmm,env,transfer=2)
> ## Not run: 
> ##D tmp=rmmToCSV(rmm,file='somePathOnYourMachine/rmm_example.csv')
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  18.53 0.65 19.17 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
